#include <stdio.h>
#include <string.h>
#include <sys/types.h>
#include <regex.h>
#include <stdlib.h>
#include <ctype.h>
#define MAX_SIZE_PREPROCESSED_FILE (1024*1024*500L)
#define MAX_MATCH_RST (1024*100)
#define MODELEN 4
/*
   Error number:
   -1:Preprocessed file can't open
  1:Preprocessed file is over the max size
	2:Can't get preprocessed file because memory is't not enough
	3:Read preprocessed file failure
   */
int dump(const char* name,void* value);
int dumps(const char* name);
int getStruct(const char* name,const char* structName,char* dst);
int myMatch(const char* name,const char* content,char* dst,int mmode);
int isBaseType(const char* type);
int isBaseType(const char* type){
	int tyid=0;
//	if(strcmp())
}

int dump(const char* name,void* value){
	
}
int dumps(const char* name){
	char buf[MAX_MATCH_RST]={};
	getStruct(__FILE__,name,buf);
//	printf("%s ss\n",__FILE__);
	char* pointer=buf;
	int i=0;
	//判断是否为一个属性的开头,用于去除,行头的空格
	int flag=1;
	int ignore=0;//0为不No , 1 为yes
	for(i=0;i<strlen(buf);i++){
		if(*(buf+i)==';'){
			flag=1;
			printf(";\n");
		}else if(isspace(*(buf+i))){
			if(flag==0&&ignore!=1){
				printf("%c",*(buf+i));
			}
			if(*(buf+i)=='\n'){
				if(ignore==1){
					flag=1;
					ignore=0;
				}
			}
		}else{
			if(flag==1){
				if(isascii(*(buf+i))){
					flag=0;
				}
				if(*(buf+i)=='#'){
					ignore=1;
				}
			}			
			if(ignore!=1&&flag==0){
				printf("%c",*(buf+i));
			}
		}
	}
	pointer=NULL;
//	printf("buf:%s\n",buf);
	return 0;
}
//取得结构体类型
int getStruct(const char* name,const char* structName,char* dst){
	int nameLen=strlen(name);
	char name2[(nameLen+1)];
	strcpy(name2,name);
	int i=nameLen;
	for(i=nameLen;name2[i]!='.';i--){};
	name2[i+1]='i';
	name2[i+2]=0;
//	printf("%s\n",name2);
	FILE* fd=fopen(name2,"r");
	if(fd==NULL){
		char temp[256]={};
		sprintf(temp,"Preprocessed file %s",name2);
		perror(temp); 
		return -1;
	}
	long int fileBegin=ftell(fd);
	fseek(fd,0L,SEEK_END);
	long int fileEnd=ftell(fd);
	long int fileSize=fileEnd-fileBegin;
	if(fileSize>MAX_SIZE_PREPROCESSED_FILE){
		printf("Preprocessed file is over the max size.\n");
		return 1;
	}
	rewind(fd);
	char* strFile=(char*)malloc(fileSize);
	if(strFile==NULL){
		perror("Get preprocessed file");
		return 2;
	}
	size_t rst=fread(strFile,fileSize,1,fd);
	if(rst==0){
		printf("Read preprocessed file failure!\n");
		return 3;
	}
//	strcpy(dst,"haha");
//	printf("structName:%s\n",structName);
//	printf("strFile:%s\n",strFile);
	myMatch(structName,strFile,dst,0);	
	free(strFile);
	return 0;
}
/*
return :
	-1 No match
   */
int myMatch(const char* name,const char* content,char* dst,int mmode){
//	int modeLen=5;
	char* mode[MODELEN]={
		"typedef [a-zA-Z0-9_]+ %s ?;",
		"typedef struct [a-zA-Z0-9_]+ %s ?;",
		"typedef struct [a-zA-Z0-9_]* ?\\{[^\\}]+\\} ?%s",
//		"typedef struct ?\\{[^\\}]+\\} ?%s",
		"struct %s ?\\{[^\\}]+\\}",
//		"%s ?\\{[^\\}]+\\}"
	};

	/*
	char base[]={
		"int",
		"double",
		"float",
		"int",
		"char"
	}
	*/

	regex_t preg;
	char regexMode[MAX_MATCH_RST]={};
	sprintf(regexMode,mode[mmode],name);
//	printf("mmode:%d,regexMode:%s\n",mmode,regexMode);
	int rst=regcomp(&preg,regexMode,REG_EXTENDED);
	if(rst!=0){
		char errBuf[256]={};
		regerror(rst,&preg,errBuf,sizeof(errBuf));
		printf("%s\n",errBuf);
		regfree(&preg);
		return 4;
	}
	regmatch_t rstMatch;
	rst=regexec(&preg,content,1,&rstMatch,0);
	if(rst==REG_NOMATCH){
		if(mmode+1>=MODELEN){
			char errBuf[256]={};
			regerror(rst,&preg,errBuf,sizeof(errBuf));
			printf("%s\n",errBuf);
			regfree(&preg);
			return -1;// No match
		}else{
			myMatch(name,content,dst,mmode+1);
		}
	}else if(rst==0){
		int len=rstMatch.rm_eo-rstMatch.rm_so;
		int i=0;
		for(i=0;i<len;i++){
			dst[i]=content[rstMatch.rm_so+i];
		}
		dst[i]=0;
//		printf("dstaa:%s\n",dst);
		char dst2[MAX_MATCH_RST]={0};
		switch(mmode){
			case 0:{
				char name2[255]={0};
				char format[255]={0};
				sprintf(format,"typedef %%s %s",name);
				sscanf(dst,format,name2);
				if(strlen(name2)==0||strcmp(name,name2)){
					myMatch(name2,content,dst,mmode+1);
					return 0;
				}
//				printf("nameLen:%d\n",strlen(name2));
//				printf("name2:%s\n",name2);
				myMatch(name2,content,dst,0);
				return 0;
//				printf("dst:%s\n",dst);
				break;
				}
			case 1:{
				char name2[255]={0};
				char format[255]={0};
				sprintf(format,"typedef struct %%s %s",name);
//				printf("format:%s\n",format);
//				printf("dst:%s\n",dst);
				sscanf(dst,format,name2);
				if(strlen(name2)==0||strcmp(name,name2)==0){
					myMatch(name2,content,dst,mmode+1);
					return 0;
				}
//				printf("name2Len:%d\n",strlen(name2));
//				printf("mmode:%d,name2:%s\n",mmode,name2);
				myMatch(name2,content,dst,0);
//				printf("dst:%s\n",dst);
				return 0;
				break;
				}
			case 2:{
//				char format[255]={0};
//                sprintf(format,"typedef struct%%s%s",name);
//  			printf("mmode:%d,format:%s\n",mmode,format);
				char temp[256]={0};
                sscanf(dst,"%[^{]{%[^}]}",temp,dst2);
//				printf("mmode:%d,dst:%s\n",mmode,dst);
				break;
				}
			case 3:{
//				char format[255]={0};
//                sprintf(format,"struct %s%%s",name);
//				printf("mmode:%d,format:%s\n",mmode,format);
//				printf("mmode:%d,dst:%s\n",mmode,dst);
				char temp[256]={0};
                sscanf(dst,"%[^{]{%[^}]}",temp,dst2);
//				printf("mmode:%d,dst:%s\n",mmode,dst);
				break;
				}
		};
//		printf("dst:%s\n",dst);
		strcpy(dst,dst2);
//		printf("mmode:%d,dst:%s\n",mmode,dst);
		return 0;
	}else{
		char errBuf[256]={};
		regerror(rst,&preg,errBuf,sizeof(errBuf));
		printf("%s\n",errBuf);
		regfree(&preg);
		return 4;
	}
	regfree(&preg);
	return 0;
}

int main(int argn,char* argv[]){
	FILE* fd=NULL;
	dumps("FiaILE");
	return 0;
}
